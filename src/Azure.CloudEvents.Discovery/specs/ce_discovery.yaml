openapi: "3.0.6"
info:
  title: CloudEvents discovery API
  description: CloudEvents discovery API specification according to [Discovery - Version 0.1-wip](https://github.com/cloudevents/spec/blob/main/discovery/spec.md#endpoint).
  version: "0.5-WIP"
servers:
  - url: https://api.cloudevents.io/test/v0.1
paths:
  /:
    get:
      operationId: getAll
      description: Gets the root manifest of this service
      parameters:
        - in: query
          name: inline
          description: Set if references shall be inlined
          required: false
          schema:
            type: bool
      responses:
        "200":
          description: A list of endpoints (optionally matching the query parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/manifest"
  /endpoints:
    get:
      operationId: getEndpoints
      description: >
         Get an optionally filtered collection of the endpoints 
         known by this discovery endpoint
      parameters:
        - in: query
          name: name
          description: The name of the endpoint to be returned
          required: false
          schema:
            type: string
            description: Filter expression
      responses:
        "200":
          description: A list of endpoints (optionally matching the query parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/endpoints"
    post:
      operationId: postEndpoints
      description: Posts (uploads) an endpoints list
      requestBody:
        $ref: "#/components/requestBodies/endpointsPostRequest"
      responses:
        "200":
          $ref: "#/components/responses/endpointsPostResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteEndpoints
      description: Deletes the endpoints identified by the references in the request body
      requestBody:
        $ref: "#/components/requestBodies/endpointsDeleteRequest"
      responses:
        "200":
          $ref: "#/components/responses/endpointsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /endpoints/{id}:
    parameters:
        - $ref: "#/components/parameters/id"
    get:
      operationId: getEndpoint
      description: > 
         Gets the metadata for a specific endpoint as a combined document
         The implementation MAY allow for navigating into the endpoint's local 
         groups and definitions. The operations listed below for /groups/... 
         then also apply to /endpoints/{id}/groups/...
      responses:
        "200":
          description: The endpoint metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/endpoint"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    put:
      operationId: putEndpoint
      requestBody:
        $ref: "#/components/requestBodies/endpointsPutRequest"
      responses:
        "200":
          $ref: "#/components/responses/endpointsPutResponse"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteEndpoint
      description: Deletes the endpoint. The epoch must be provided as query parameter
      parameters:
        - in: query
          name: epoch
          description: The epoch of the endpoint to be deleted
          required: false
          schema:
            type: integer
            description: A number representing the version number of the resource.
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/endpointDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /groups:
    get:
      operationId: getGroups
      description: >
        Get an optionally filtered collection of the message 
        description groups known by this discovery endpoint
      parameters:
        - in: query
          name: name
          description: The name of the group to be returned
          required: false
          schema:
            type: string
            description: Filter expression
      responses:
        "200":
          description: A list of groups (optionally matching the query parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/groups"
    post:
      operationId: postGroups
      description: Posts (uploads) a set of groups
      requestBody:
        $ref: "#/components/requestBodies/groupsPostRequest"
      responses:
        "200":
          $ref: "#/components/responses/groupsPostResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteGroups
      description: deletes the groups indicated in the request
      requestBody:
        $ref: "#/components/requestBodies/groupsDeleteRequest"
      responses:
        "200":
          $ref: "#/components/responses/groupsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /groups/{groupid}:
    parameters:
      - $ref: "#/components/parameters/groupid"
    get:
      operationId: getGroup
      description: gets the metadata of a group
      responses:
        "200":
          description: Group metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/group"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    put:
      operationId: putGroup
      requestBody:
        $ref: "#/components/requestBodies/groupPutRequest"
      responses:
        "200":
          $ref: "#/components/responses/groupPutResponse"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteGroup
      parameters:
        - $ref: "#/components/parameters/groupid"
        - in: query
          name: epoch
          description: The epoch of the group to be deleted
          required: false
          schema:
            type: integer
            description: A number representing the version number of the resource.
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/groupDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /groups/{groupid}/definitions:
    parameters:
      - $ref: "#/components/parameters/groupid"  
    get:
      operationId: getDefinitions
      description: >
        Get an optionally filtered collection of the 
        definitions inside this group
      parameters:
        - in: query
          name: name
          description: The name of the definition to be returned
          required: false
          schema:
            type: string
            description: Filter expression
      responses:
        "200":
          description: A list of definitions (optionally matching the query parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/definitions"
    post:
      operationId: postDefinitions
      requestBody:
        $ref: "#/components/requestBodies/definitionsPostRequest"
      responses:
        "200":
          $ref: "#/components/responses/definitionsPostResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteDefinitions
      requestBody:
        $ref: "#/components/requestBodies/definitionsDeleteRequest"
      responses:
        "200":
          $ref: "#/components/responses/definitionsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /groups/{groupid}/definitions/{defid}:
    parameters:
        - $ref: "#/components/parameters/groupid"
        - $ref: "#/components/parameters/defid"
    get:
      operationId: getDefinition
      responses:
        "200":
          description: The current definition version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/definition"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    post:
      operationId: postDefinition
      requestBody:
        $ref: "#/components/requestBodies/definitionPostRequest"
      responses:
        "200":
          $ref: "#/components/responses/definitionPostResponse"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteDefinition
      parameters:
        - in: query
          name: epoch
          description: The epoch of the definition to be deleted
          required: false
          schema:
            type: integer
            description: A number representing the version number of the resourceresource.
            format: int64

      responses:
        "200":
          $ref: "#/components/responses/definitionsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /groups/{groupid}/definitions/{defid}/version/{versionid}:
    parameters:
        - $ref: "#/components/parameters/groupid"
        - $ref: "#/components/parameters/defid"
        - $ref: "#/components/parameters/versionid"
    get:
      operationId: getDefinitionVersion
      responses:
        "200":
          description: The definition version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/definition"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    delete:
      operationId: deleteDefinitionVersion
      parameters:
        - in: query
          name: epoch
          description: The epoch of the definition to be deleted
          required: false
          schema:
            type: integer
            description: A number representing the version number of the resource.
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/definitionsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /schemagroups:
    get:
      operationId: getSchemaGroups
      description: > 
         Get an optionally filtered collection 
         of all known schema groups
      parameters:
        - in: query
          name: name
          description: The name of the schema group to be returned
          required: false
          schema:
            type: string
            description: Filter expression
      responses:
        "200":
          $ref: "#/components/responses/schemaGroupsGetResponse"
        "404":
          description: No groups found 
    post:
      operationId: postSchemaGroups
      requestBody:
        $ref: "#/components/requestBodies/schemaGroupsPostRequest"
      responses:
        "201":
          $ref: "#/components/responses/schemaGroupsPostResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteSchemaGroups
      requestBody:
        $ref: "#/components/requestBodies/schemaGroupsDeleteRequest"
      responses:
        "200":
          $ref: "#/components/responses/schemaGroupsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /schemagroups/{schemagroupid}:
    parameters:
      - $ref: "#/components/parameters/schemagroupid"
    get:
      operationId: getSchemagroup
      responses:
        "200":
          description: The schemagroup
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemaGroup"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    put:
      operationId: putSchemagroup
      description: this creates or updates the schema group
      requestBody:
        $ref: "#/components/requestBodies/schemaGroupPutRequest"
      responses:
        "200":
          $ref: "#/components/responses/schemaGroupPutResponse"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteSchemagroup
      parameters:
        - in: query
          name: epoch
          description: The epoch of the schemagroup to be deleted
          required: false
          schema:
            type: integer
            description: A number representing the version number of the resource.
            format: int64
      responses:
        "200":
          $ref: "#/components/responses/schemaGroupsDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /schemagroups/{schemagroupid}/schemas:
    parameters:
        - $ref: "#/components/parameters/schemagroupid"  
    get:
      operationId: getSchemas
      description: Get an optionally filtered collection of schemas
      parameters:
        - in: query
          name: name
          description: The name of the schema to be returned
          required: false
          schema:
            type: string
            description: Filter expression
      responses:
        "200":
          description: A list of schemas (optionally matching the query parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemas"
    put:
      operationId: putSchemas
      requestBody:
        $ref: "#/components/requestBodies/schemasPutRequest"
      responses:
        "200":
          $ref: "#/components/responses/schemasPutResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
    delete:
      operationId: deleteSchemas
      requestBody:
        $ref: "#/components/requestBodies/schemasDeleteRequest"
      responses:
        "200":
          $ref: "#/components/responses/schemasDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /schemagroups/{schemagroupid}/schemas/{schemaid}:
    parameters:
      - $ref: "#/components/parameters/schemagroupid"
      - $ref: "#/components/parameters/schemaid"
    get:
      operationId: getLatestSchema
      responses:
        "200":
          description: The corresponding schema
          content:
            application/octet-stream:              
              schema:
                # a binary file of any type
                type: string
                format: binary
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    post:
      summary: Post new schema version
      description: >
        Register schema version
        If schema of specified name does not exist in specified group, schema and schema version is created at version 1.
        If schema of specified name exists already in specified group, schema is created at latest version + 1.
        If schema with identical content already exists, existing schema's ID is returned. 
      operationId: postSchemaDocument
      parameters:
        - in: header
          description: description
          name: description
          schema:
            type: string
        - in: header
          description: format
          name: format
          schema:
            type: string
      requestBody:
         description: A request to add a new schema document to the schema's document collection
         content:
           application/octet-stream: 
              schema:
                # a binary file of any type
                type: string
                format: binary
      responses:
        "201":
         description: A request to add a new schema document to the schema's document collection
         content:
           application/octet-stream:
              schema:
                # a binary file of any type
                type: string
                format: binary
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
        "409":
          description: Conflict - epoch not greater
  /schemagroups/{schemagroupid}/schemas/{schemaid}?meta:
    parameters:
        - $ref: "#/components/parameters/schemagroupid"
        - $ref: "#/components/parameters/schemaid"
    get:
      operationId: getLatestSchemaMetadata
      responses:
        "200":
          description: The corresponding schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemaversion"
        "400":
          description: Bad Request - constraint failure
        "404":
          description: Not Found
    put:
      operationId: updateLatestSchemaVersionMetadata
      description: Updates metadata of the document stored for the schema version
      requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/schemaversion"
      responses:
        "200":
            description: The metadata of the schema version document
            content:
              application/json:
                  schema:
                     $ref: "#/components/schemas/schemaversion"
        "400":
            description: Bad Request - constraint failure
        "404":
            description: Not Found
  /schemagroups/{schemagroupid}/schemas/{schemaid}/versions/{versionid}: 
    parameters:
        - $ref: "#/components/parameters/schemagroupid"
        - $ref: "#/components/parameters/schemaid"
        - $ref: "#/components/parameters/versionid"
    get:
      operationId: getSchemaVersion
      description: Gets the document stored for the schema version
      responses:
        "200":
            description: The schema version document
            content:
              application/octet-stream:
                schema:
                  # a binary file of any type
                  type: string
                  format: binary
        "400":
            description: Bad Request - constraint failure
        "404":
            description: Not Found
    delete:
      operationId: deleteSchemaVersion
      responses:
        "200":
          $ref: "#/components/responses/schemaVersionDeleteResponse"
        "400":
          description: Bad Request - constraint failure
        "409":
          description: Conflict - epoch not greater
  /schemagroups/{schemagroupid}/schemas/{schemaid}/versions/{versionid}?meta: 
    parameters:
        - $ref: "#/components/parameters/schemagroupid"
        - $ref: "#/components/parameters/schemaid"
        - $ref: "#/components/parameters/versionid"
    get:
      operationId: getSchemaVersionMetadata
      description: Gets metadata of the document stored for the schema version
      responses:
        "200":
            description: The metadata of the schema version document
            content:
              application/json:
                  schema:
                     $ref: "#/components/schemas/schemaversion"
        "400":
            description: Bad Request - constraint failure
        "404":
            description: Not Found
    put:
      operationId: updateSchemaVersionMetadata
      description: Updates metadata of the document stored for the schema version
      requestBody:
        content:
            application/json:
                schema:
                    $ref: "#/components/schemas/schemaversion"
      responses:
        "200":
            description: The metadata of the schema version document
            content:
              application/json:
                  schema:
                     $ref: "#/components/schemas/schemaversion"
        "400":
            description: Bad Request - constraint failure
        "404":
            description: Not Found
components:
  parameters:
    id:
      in: path
      name: id
      description: The id of the endpoint
      required: true
      schema:
        type: string
        description: A unique identifier 
        format: uri-reference
    groupid:
      in: path
      name: groupid
      description: The id of the group
      required: true
      schema:
        type: string
        description: A unique identifier 
        format: uri-reference
    defid:
      in: path
      name: defid
      description: The id of the definition
      required: true
      schema:
        type: string
        description: A unique identifier 
        format: uri-reference
    schemaid:
      in: path
      name: schemaid
      description: The id of the schema
      required: true
      schema:
        type: string
        description: A unique identifier 
        format: uri-reference
    schemagroupid:
      in: path
      name: schemagroupid
      description: The id of the schemagroup
      required: true
      schema:
        type: string
        description: A unique identifier 
        format: uri-reference
    versionid:
      in: path
      name: versionid
      description: The id of the schema
      required: true
      schema:
        type: string
        description: A unique identifier 
        format: uri-reference
  requestBodies:
    endpointsPostRequest:
      description: A request to create or update the discovery endpoint's collection of endpoints with the given endpoints
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpoints"
    endpointsDeleteRequest:
      description: A request to remove the given endpoints from the discovery endpoint's collection of endpoints
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpointReferences"
    endpointsPutRequest:
      description: A request to create or update the discovery endpoint's collection of endpoints with the given endpoint
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpoint"
    groupsPostRequest:
      description: A request to create or update the discovery group's collection of groups with the given groups
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/groups"
    groupsDeleteRequest:
      description: A request to remove the given groups from the discovery group's collection of groups
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/groupReferences"
    groupPutRequest:
      description: A request to create or update the discovery group's collection of groups with the given group
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/group"
    definitionsPostRequest:
      description: A request to create or update the discovery definition's collection of definitions with the given definitions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definitions"
    definitionsDeleteRequest:
      description: A request to remove the given definitions from the discovery definition's collection of definitions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definitionReferences"
    definitionPostRequest:
      description: A request to create or update the discovery definition's collection of definitions with the given definition
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definition"
    schemaGroupsPostRequest:
      description: A request to create new schema groups
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroups"
    schemaGroupsDeleteRequest:
      description: A request to remove the given schemagroups 
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroupReferences"
    schemaGroupPutRequest:
      description: A request to create or update the discovery group's collection of schemagroups with the given group
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroup"
    schemasPutRequest:
      description: A request to create or update the discovery definition's collection of schemas with the given schemas
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas"
    schemasDeleteRequest:
      description: A request to remove the given schemas from the discovery definition's collection of schemas
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaReferences"
  responses:
    endpointsPostResponse:
      description: A list of the resulting Endpoint values resulting from processing the request, in the same order as in the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpoints"
    endpointsDeleteResponse:
      description: A list of the Endpoints that were deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpoints"
    endpointsPutResponse:
      description: A Endpoint Reference referencing the updated Endpoint
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpoint"
    endpointDeleteResponse:
      description: The Endpoint that was deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/endpoint"
    groupsPostResponse:
      description: A list of the resulting Group values resulting from processing the request, in the same order as in the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/groups"
    groupsDeleteResponse:
      description: A list of the Groups that were deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/groups"
    groupPutResponse:
      description: A Group Reference referencing the updated Group
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/group"
    groupDeleteResponse:
      description: The Group that was deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/group"
    definitionsPostResponse:
      description: A list of the resulting Definition values resulting from processing the request, in the same order as in the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definitions"
    definitionsDeleteResponse:
      description: A list of the Definitions that were deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definitions"
    definitionPostResponse:
      description: Returns the accepted definition 
      headers:
        Location:
           description: URI of the created definition
           schema:
             type: string
             format: uri
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definition"
    definitionDeleteResponse:
      description: The Definition that was deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/definition"
    schemaGroupsGetResponse:
      description: A list of the resulting Group values resulting from processing the request, in the same order as in the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroups"
    schemaGroupsPostResponse:
      description: A list of the resulting Group values resulting from processing the request, in the same order as in the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroups"
    schemaGroupsDeleteResponse:
      description: A list of the Groups that were deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroups"
    schemaGroupPutResponse:
      description: A Group Reference referencing the updated Group
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroup"
    schemaGroupDeleteResponse:
      description: The Group that was deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaGroup"
    schemasPutResponse:
      description: A list of the resulting Definition values resulting from processing the request, in the same order as in the request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas"
    schemasDeleteResponse:
      description: A list of the Definitions that were deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas"
    schemaDeleteResponse:
      description: The Definition that was deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schema"
    registerSchemaDocumentResponse:
      description: Newly created schema version metadata
      headers:
         Location:
            description: The URI of the created schema version
            schema:
              type: string
              format: uri
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaversion"
    schemaVersionDeleteResponse:
      description: The Definition that was deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemaversion"
  schemas:
    manifest:
      type: object
      properties:
        $schema:
          type: string
          default: "https://cloudevents.io/schemas/discovery"
        specversion: 
          type: string
          default: "0.5-wip"
        endpoints:
          $ref: "#/components/schemas/endpoints"
        endpointsUrl:
          type: string
          format: uri
        groups:
          $ref: "#/components/schemas/groups"
        groupsUrl:
          type: string
          format: uri
        schemaGroups:
          $ref: "#/components/schemas/schemaGroups"
        schemaGroupsUrl:
          type: string
          format: uri
    reference:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier 
          format: uri-reference
        epoch:
          type: integer
          description: A number representing the version number of the resource.
          format: int64
    groupReference:
      $ref: "#/components/schemas/reference"
    groupReferences:
      type: array
      items:
        $ref: "#/components/schemas/groupReference"
    groupUriReferences:
      type: array
      items:
        type: string
        format: uri
    group:
      allOf:
        - $ref: "#/components/schemas/resource"
        - type: object
          properties:
            format:
                type: string
                description: Specifies the `format` value of the Definitions associated with this Endpoint.
            definitions:
                $ref: "#/components/schemas/definitions"
            definitionsUrl:
                type: string
                format: uri
            groups:
                $ref: "#/components/schemas/groups"
            groupsUrl:
                type: string
                format: uri
    definitionReference:
      $ref: "#/components/schemas/reference"
    definitionReferences:
      type: array
      items:
        $ref: "#/components/schemas/definitionReference"

    definition:
       allOf:
        - $ref: "#/components/schemas/resource"
        - type: object
          description: a message definition
          properties:
            ownergroup:
              type: string
              description: A reference to the Group or Endpoint that defined this
              format: uri-reference
            schemaurl:
              type: string
              description: A URL to the schema of the message's data.
              format: uri
            schema:
              type: object
              description: An in-line definition of the schema of the message's data.
    cloudEventDefinition:
      allOf:
        - $ref: "#/components/schemas/definition"
        - type: object
          properties:
            format:
              type: string
              description: Specifies the `format` value of the Definitions associated with this Endpoint.
#              const: "CloudEvents/1.0"
              default: "CloudEvents/1.0"
            metadata:
              $ref: "#/components/schemas/cloudEventMetadata"
    amqpDefinition:
      allOf:
        - $ref: "#/components/schemas/definition"
        - type: object
          properties:
            format:
              type: string
              description: Specifies the `format` value of the Definitions associated with this Endpoint.
#              const: "AMQP/1.0"
              default: "AMQP/1.0"
            metadata:
              $ref: "#/components/schemas/amqpMetadata"
    mqttDefinition:
      allOf:
        - $ref: "#/components/schemas/definition"
        - type: object
          properties:
            format:
              type: string
              description: Specifies the `format` value of the Definitions associated with this Endpoint.
#              const: "MQTT/5.0"
              default: "MQTT/5.0"
            metadata:
              $ref: "#/components/schemas/mqttMetadata"
    genericDefinition:
      allOf:
        - $ref: "#/components/schemas/definition"
        - type: object
          properties:
            format:
              type: string
              description: Specifies the `format` value of the Definitions associated with this Endpoint.
            metadata:
              type: object
    amqpMetadata:
      type: object
      properties:
        application-properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/metadataProperty"
        properties:
          type: object
          properties:
            message-id:
              $ref: "#/components/schemas/metadataPropertyString"
            user-id:
              $ref: "#/components/schemas/metadataPropertyBinary"
            to:
              $ref: "#/components/schemas/metadataPropertyUriTemplate"
            subject:
              $ref: "#/components/schemas/metadataPropertyString"
            reply-to:
              $ref: "#/components/schemas/metadataPropertyUriTemplate"
            correlation-id:
              $ref: "#/components/schemas/metadataPropertyString"
            content-type:
              $ref: "#/components/schemas/metadataPropertySymbol"
            content-encoding:
              $ref: "#/components/schemas/metadataPropertySymbol"
            absolute-expiry-time:
              $ref: "#/components/schemas/metadataPropertyDateTime"
            creation-time:
              $ref: "#/components/schemas/metadataPropertyDateTime"
            group-id:
              $ref: "#/components/schemas/metadataPropertyString"
            group-sequence:
              $ref: "#/components/schemas/metadataPropertyInteger"
            reply-to-group-id:
              $ref: "#/components/schemas/metadataPropertyString"
        delivery-annotations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/metadataProperty"
        message-annotations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/metadataProperty"
        header:
          type: object
          properties:
            durable:
              $ref: "#/components/schemas/metadataPropertyBoolean"
            priority:
              $ref: "#/components/schemas/metadataPropertyInteger"
            ttl:
              $ref: "#/components/schemas/metadataPropertyInteger"
            first-acquirer:
              $ref: "#/components/schemas/metadataPropertyBoolean"
            delivery-count:
              $ref: "#/components/schemas/metadataPropertyInteger"
        footer:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/metadataProperty"
    mqttMetadata:
      type: object
      properties:
        qos:
          $ref: "#/components/schemas/metadataPropertyInteger"
        retain:
          $ref: "#/components/schemas/metadataPropertyBoolean"
        topic-name:
          $ref: "#/components/schemas/metadataPropertyUriTemplate"
        payload-format:
          $ref: "#/components/schemas/metadataPropertyInteger"
        message-expiry-interval:
          $ref: "#/components/schemas/metadataPropertyInteger"
        response-topic:
          $ref: "#/components/schemas/metadataPropertyUriTemplate"
        correlation-data:
          $ref: "#/components/schemas/metadataPropertyBinary"
        content-type:
          $ref: "#/components/schemas/metadataPropertySymbol"
        user-properties:
          type: array
          description: User Property is allowed to appear multiple times to represent multiple name, value pairs. The same name is allowed to appear more than once.
          items:
            type: object
            properties:
              name:
                type: string
              value:
                $ref: "#/components/schemas/metadataProperty"
    cloudEventMetadata:
      type: object
      properties:
        id:
            $ref: "#/components/schemas/metadataPropertyString"
        type:
            $ref: "#/components/schemas/metadataPropertyString"
        time:
            $ref: "#/components/schemas/metadataPropertyDateTime"
        source:
            $ref: "#/components/schemas/metadataPropertyUriTemplate"
        subject:
            $ref: "#/components/schemas/metadataPropertyString"
        dataschema:
            $ref: "#/components/schemas/metadataPropertyUriTemplate"
        datacontenttype:
            $ref: "#/components/schemas/metadataPropertySymbol"
      additionalProperties:
        $ref: "#/components/schemas/metadataProperty"
    metadataPropertyBase:
      type: object
      discriminator:
        propertyName: type
        mapping:
          var: "#/components/schemas/metadataProperty"
          boolean: "#/components/schemas/metadataPropertyBoolean"
          string: "#/components/schemas/metadataPropertyString"
          symbol: "#/components/schemas/metadataPropertySymbol"
          binary: "#/components/schemas/metadataPropertyBinary"
          datetime: "#/components/schemas/metadataPropertyDateTime"
          duration: "#/components/schemas/metadataPropertyDuration"
          uritemplate: "#/components/schemas/metadataPropertyUriTemplate"
          uri: "#/components/schemas/metadataPropertyUri"
          urireference: "#/components/schemas/metadataPropertyUriReference"
          number: "#/components/schemas/metadataPropertyNumber"
          integer: "#/components/schemas/metadataPropertyInteger"
      required:
        - type
      properties:
        type:
          type: string
        required:
          type: boolean
        description:
          type: string
        specurl:
          type: string
          format: uri
    metadataProperty:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: object
    metadataPropertyBoolean:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: boolean              
    metadataPropertyString:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
    metadataPropertySymbol:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              pattern: "^[\\x32-\\x7F]*$"
    metadataPropertyBinary:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              format: binary
    metadataPropertyDateTime:
      description: This is a date-time property, holding RFC3339 string expressions. Since it ought to be rare for the value of date-time attributes to be set in a definition, this is not using the "date-time" format which might be turned intro a non-nullable type with some code generators.
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              format: date-time
    metadataPropertyDuration:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              format: duration
    metadataPropertyUriTemplate:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              format: uri-template
    metadataPropertyInteger:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: integer
    metadataPropertyNumber:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: number
    metadataPropertyUri:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              format: uri
    metadataPropertyUriReference:
      allOf:
        - "$ref": "#/components/schemas/metadataPropertyBase"
        - type: object
          properties:
            value:
              type: string
              format: uri-reference
    definitions:
      type: object
      description: A collection of Message Definitions.
      additionalProperties:
        $ref: "#/components/schemas/definition"
    groups:
      type: object
      description: A set of Definition Groups.
      additionalProperties:
        $ref: "#/components/schemas/group"
    resource:
      type: object
      discriminator:
        propertyName: type
      mapping:
        group: "#/components/schemas/group"
        definition: "#/components/schemas/definition"
        amqp: "#/components/schemas/amqpDefinition"
        mqtt: "#/components/schemas/mqttDefinition"
        cloudevent: "#/components/schemas/cloudEventDefinition"
        schemagroup: "#/components/schemas/schemaGroup"
        endpoint: "#/components/schemas/endpoint"
        schema: "#/components/schemas/schema"
        schemaversion: "#/components/schemas/schemversion"
      required:
        - type
        - id
      properties:
        type:
          type: string 
        id:
          type: string
          description: A unique identifier for this Endpoint. This value MUST be globally unique
          format: uri-reference
        version:
          type: integer
          description: A number representing the version number of the resource.
          format: int64
        self:
          type: string
          description: A unique URI for the resource. The URI MUST be a combination of the base URI of the list of this resource type for the current Discovery Service appended with the `id` of this resource.
          format: uri
        description:
          type: string
          description: A summary of the purpose of the resource.
        name:
          type: string
          description: The name of the resource.
        docs:
          type: string
          description: Absolute URL that provides a link to additional documentation about the resource.
          format: uri
        origin:
          type: string
          description: A URI reference to the original source of this resource.
          format: uri-reference
        tags:
          type: array
          items:
            type: object
            properties: 
              name: 
                type: string
              value:
                type: string
        createdBy:
          description: Identity of who created this entity
          type: string
        createdOn:
          description: Time when this entity was created
          type: string
          format: date-time
        modifiedBy:
          description: Identity of who last modified this entity
          type: string
        modifiedOn:
          description: Time when this entity was last modified
          type: string
          format: date-time

    resourceWithVersion:
      allOf:
        - $ref: "#/components/schemas/resource"
        - type: object
          description: resource with version identifier
          properties:
             version:
                type: string
                description: Server assigned version identifier. 
    resourceWithVersionedResources:
      allOf:
        - $ref: "#/components/schemas/resource"
        - type: object
          description: collection of versioned resources
          properties:
             versions:
                type: object
                additionalProperties:
                    $ref: "#/components/schemas/resourceWithVersion"
    endpointReference:
      $ref: "#/components/schemas/reference"
    endpointReferences:
      type: array
      items:
        $ref: "#/components/schemas/endpointReference"
    endpoints:
      type: object
      additionalProperties:
         $ref: "#/components/schemas/endpoint"
    endpoint:
      allOf:
        - $ref: "#/components/schemas/resource"
        - type: object
          properties:
            channel:
              type: string
              description: A string that can be used to correlate Endpoints
            usage:
              description: The interaction model supported by this Endpoint 
              type: string
              enum: ["consumer", "producer", "subscriber"]                
            config:
              $ref: "#/components/schemas/endpointConfig"
            format:
              type: string
              description: Specifies the `format` value of the Definitions associated with this Endpoint.
            deprecated:
              type: object
              properties:
                effective:
                  type: string
                  format: date-time
                  description: The time at which the endpoint will enter a deprecated state
                removal:
                  type: string
                  format: date-time
                  description: The time at which the endpoint will be removed
                alternative:
                  type: string
                  format: uri
                  description: A URL to an possible alternative endpoint
                docs:
                  type: string
                  format: uri
                  description: A URL to additional information concerning the deprecation of this endpoint. Possible information might include rationale behind the action, or discussion of alternatives
            authscope:
              type: string
              description: Authorization scope needed for creating subscriptions. The actual meaning of this field is determined on a per-endpoint basis
              example: storage.read
            definitions:
              $ref: "#/components/schemas/definitions"
            groups:
              $ref: "#/components/schemas/groupUriReferences"
    endpointConfig:
      type: object
      discriminator:
        propertyName: usage
      mapping:
        subscriber: "#/components/schemas/endpointConfigSubscriber" 
        consumer: "#/components/schemas/endpointConfigConsumer" 
        producer: "#/components/schemas/endpointConfigProducer" 
      properties:
        usage:
          type: string
        protocol:
          type: string
        strict:
          type: boolean
        endpoints:
          oneOf:
            - type: array
              items: 
                type: string
                format: uri         
            - type: string
              format: uri            
        options:
          $ref: "#/components/schemas/endpointOptions"
    endpointConfigSubscriber:
      allOf: 
        - $ref : "#/components/schemas/endpointConfig" 
        - type: object
          properties:
            subscriptionconfig:
              type: object
              description: "A map indicating supported options for the config parameter for the CloudSubscriptions subscribe() API call. Keys are the name of keys in the allowed config map, the values indicate the type of that parameter, confirming to the CloudEvents type system. TODO: Needs resolution with CloudSubscriptions API"
              additionalProperties:
                type: string
            filterdialects:
              type: array
              description: Filter dialects that can be used in subscriptions for this endpoint
              items:
                type: string
                description: filter dialect
              example: '[ "basic" ]'
    endpointConfigConsumer:
      allOf: 
        - $ref : "#/components/schemas/endpointConfig" 
        - type: object    
    endpointConfigPublisher:
      allOf: 
        - $ref : "#/components/schemas/endpointConfig" 
        - type: object    
    endpointOptions:
      type: object
      discriminator:
         propertyName: protocol
      mapping:
        mqtt: "#/components/schemas/endpointOptionsMqtt" 
        amqp: "#/components/schemas/endpointOptionsAmqp" 
        http: "#/components/schemas/endpointOptionsHttp" 
      properties:
         protocol: 
           type: string
    endpointOptionsMqtt:
      allOf: 
        - $ref : "#/components/schemas/endpointOptions" 
        - type: object
    endpointOptionsAmqp:
      allOf: 
        - $ref : "#/components/schemas/endpointOptions" 
        - type: object
    endpointOptionsHttp:
      allOf: 
        - $ref : "#/components/schemas/endpointOptions" 
        - type: object
    schemaGroupReference:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier 
          format: uri-reference
        epoch:
          type: integer
          description: A number representing the version number of the resource.
          format: int64
    schemaGroupReferences:
      type: array
      items:
        $ref: "#/components/schemas/schemaGroupReference"
    schemaGroupUriReferences:
      type: array
      items:
        type: string
        format: uri
    schemaGroups:
      type: object
      description: A collection of schemagroups
      additionalProperties:
        $ref: "#/components/schemas/schemaGroup"  
    schemaGroup:
      allOf:
        - $ref: "#/components/schemas/resource"
        - type: object
          properties:
            format:
              type: string
              description: Specifies the format of all schemas in this group
              example: ["json", "avro", "xsd", "protobuf"]
            schemas:
              $ref: "#/components/schemas/schemas"
            schemagroups:
              $ref: "#/components/schemas/schemaGroups"           
    schemaReference:
      $ref: "#/components/schemas/reference"
    schemaReferences:
      type: array
      items:
        $ref: "#/components/schemas/schemaReference"
    schemas:
      type: object
      description: A collection of schemas
      additionalProperties:
        $ref: "#/components/schemas/schema"  
    schema:
       allOf:
        - $ref: "#/components/schemas/resourceWithVersionedResources"
        - type: object
          description: a schema is a collection of schema version documents that describe semantically the same data item
          properties:
            versions:
              type: object
              description: A collection of schema versions
              additionalProperties:
                $ref: "#/components/schemas/schemaversion"  
    schemaversion:
       allOf:
        - $ref: "#/components/schemas/resourceWithVersion"
        - type: object
          description: a schema version (a document)
          properties:
            schemaurl:
              type: string
              description: A URL to the schema document.
              format: uri
            schemaobject:
              type: object
              description: An in-line definition of the schema document (JSON).