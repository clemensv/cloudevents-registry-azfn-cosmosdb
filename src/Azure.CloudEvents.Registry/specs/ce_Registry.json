{
  "openapi": "3.0.6",
  "info": {
    "title": "CloudEvents Registry API",
    "description": "CloudEvents Registry API",
    "version": "0.4-wip"
  },
  "servers": [],
  "security": [
    {
      "api_key": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "operationId": "getAll",
        "description": "Gets the root document of this service",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of endpoints (optionally matching the query parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "uploadDoc",
        "description": "Uploads a registry document and upserts its contents into the registry",
        "requestBody": {
          "$ref": "#/components/requestBodies/uploadDocPostRequest"
        },
        "responses": {
          "200": {
            "description": "A list of endpoints (optionally matching the query parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      }
    },
    "/endpoints": {
      "get": {
        "operationId": "getEndpoints",
        "description": "Get an optionally filtered collection of the endpoints  known by this discovery endpoint\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "The name of the endpoint to be returned",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter expression"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of endpoints (optionally matching the query parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoints"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postEndpoints",
        "description": "Posts (uploads) an endpoints list",
        "requestBody": {
          "$ref": "#/components/requestBodies/endpointsPostRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/endpointsPostResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteEndpoints",
        "description": "Deletes the endpoints identified by the references in the request body",
        "responses": {
          "200": {
            "$ref": "#/components/responses/endpointsDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/endpoints/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "operationId": "getEndpoint",
        "description": "Gets the metadata for a specific endpoint as a combined document The implementation MAY allow for navigating into the endpoint's local  groups and definitions. The operations listed below for /groups/...  then also apply to /endpoints/{id}/groups/...\n",
        "responses": {
          "200": {
            "description": "The endpoint metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "operationId": "putEndpoint",
        "requestBody": {
          "$ref": "#/components/requestBodies/endpointsPutRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/endpointsPutResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteEndpoint",
        "description": "Deletes the endpoint. The epoch must be provided as query parameter",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the endpoint to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/endpointDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "operationId": "getGroups",
        "description": "Get an optionally filtered collection of the message  description groups known by this discovery endpoint\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "The name of the group to be returned",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter expression"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups (optionally matching the query parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/definitiongroups"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postGroups",
        "description": "Posts (uploads) a set of groups",
        "requestBody": {
          "$ref": "#/components/requestBodies/groupsPostRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupsPostResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteGroups",
        "description": "deletes the groups indicated in the request",
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupsDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/groups/{groupid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getGroup",
        "description": "gets the metadata of a group",
        "responses": {
          "200": {
            "description": "Group metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/definitiongroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "operationId": "putGroup",
        "requestBody": {
          "$ref": "#/components/requestBodies/groupPutRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupPutResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/groupid"
          },
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the group to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/groupDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/groups/{groupid}/definitions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getDefinitions",
        "description": "Get an optionally filtered collection of the  definitions inside this group\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "The name of the definition to be returned",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter expression"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of definitions (optionally matching the query parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/definitions"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postDefinitions",
        "requestBody": {
          "$ref": "#/components/requestBodies/definitionsPostRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/definitionsPostResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteDefinitions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/definitionsDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/groups/{groupid}/definitions/{defid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/defid"
        }
      ],
      "get": {
        "operationId": "getDefinition",
        "responses": {
          "200": {
            "description": "The current definition version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/definition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "operationId": "postDefinition",
        "requestBody": {
          "$ref": "#/components/requestBodies/definitionPostRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/definitionPostResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteDefinition",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the definition to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/definitionsDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/groups/{groupid}/definitions/{defid}/version/{versionid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/defid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        }
      ],
      "get": {
        "operationId": "getDefinitionVersion",
        "responses": {
          "200": {
            "description": "The definition version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/definition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "operationId": "deleteDefinitionVersion",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the definition to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/definitionsDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups": {
      "get": {
        "operationId": "getSchemaGroups",
        "description": "Get an optionally filtered collection  of all known schema groups\n",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "The name of the schema group to be returned",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter expression"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemaGroupsGetResponse"
          },
          "404": {
            "description": "No groups found"
          }
        }
      },
      "post": {
        "operationId": "postSchemaGroups",
        "requestBody": {
          "$ref": "#/components/requestBodies/schemaGroupsPostRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemaGroupsPostResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaGroups",
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemaGroupsDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{schemagroupid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/schemagroupid"
        }
      ],
      "get": {
        "operationId": "getSchemaGroup",
        "responses": {
          "200": {
            "description": "The schema group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemaGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "operationId": "putSchemaGroup",
        "description": "this creates or updates the schema group",
        "requestBody": {
          "$ref": "#/components/requestBodies/schemaGroupPutRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemaGroupPutResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaGroup",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the schema group to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemaGroupDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{schemagroupid}/schemas": {
      "parameters": [
        {
          "$ref": "#/components/parameters/schemagroupid"
        }
      ],
      "get": {
        "operationId": "getSchemas",
        "description": "Get an optionally filtered collection of schemas",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "The name of the schema to be returned",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter expression"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of schemas (optionally matching the query parameter)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putSchemas",
        "requestBody": {
          "$ref": "#/components/requestBodies/schemasPutRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemasPutResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemas",
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemasDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{schemagroupid}/schemas/{schemaid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/schemagroupid"
        },
        {
          "$ref": "#/components/parameters/schemaid"
        }
      ],
      "get": {
        "operationId": "getLatestSchema",
        "responses": {
          "200": {
            "description": "The corresponding schema",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-docs": {
                "$ref": "#/components/headers/resource-docs"
              },
              "resource-origin": {
                "$ref": "#/components/headers/resource-origin"
              },
              "resource-tags": {
                "$ref": "#/components/headers/resource-tags"
              },
              "resource-createdby": {
                "$ref": "#/components/headers/resource-createdby"
              },
              "resource-createdon": {
                "$ref": "#/components/headers/resource-createdon"
              },
              "resource-modifiedby": {
                "$ref": "#/components/headers/resource-modifiedby"
              },
              "resource-modifiedon": {
                "$ref": "#/components/headers/resource-modifiedon"
              },
              "Content-Location": {
                "description": "permalink location of the returned version",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "summary": "Post new schema version",
        "description": "Register schema version If schema of specified name does not exist in specified group, schema and schema version is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1. If schema with identical content already exists, existing schema's ID is returned. \n",
        "operationId": "postSchemaDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-docs"
          },
          {
            "$ref": "#/components/parameters/resource-origin"
          },
          {
            "$ref": "#/components/parameters/resource-tags"
          },
          {
            "in": "header",
            "description": "format",
            "name": "format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A request to add a new schema document to the schema's document collection",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A request to add a new schema document to the schema's document collection",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-docs": {
                "$ref": "#/components/headers/resource-docs"
              },
              "resource-origin": {
                "$ref": "#/components/headers/resource-origin"
              },
              "resource-tags": {
                "$ref": "#/components/headers/resource-tags"
              },
              "resource-createdby": {
                "$ref": "#/components/headers/resource-createdby"
              },
              "resource-createdon": {
                "$ref": "#/components/headers/resource-createdon"
              },
              "resource-modifiedby": {
                "$ref": "#/components/headers/resource-modifiedby"
              },
              "resource-modifiedon": {
                "$ref": "#/components/headers/resource-modifiedon"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{schemagroupid}/schemas/{schemaid}/meta": {
      "parameters": [
        {
          "$ref": "#/components/parameters/schemagroupid"
        },
        {
          "$ref": "#/components/parameters/schemaid"
        }
      ],
      "get": {
        "operationId": "getLatestSchemaMetadata",
        "responses": {
          "200": {
            "description": "The corresponding schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemaVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "operationId": "updateLatestSchemaVersionMetadata",
        "description": "Updates metadata of the document stored for the schema version",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schemaVersion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The metadata of the schema version document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemaVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/schemagroups/{schemagroupid}/schemas/{schemaid}/versions/{versionid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/schemagroupid"
        },
        {
          "$ref": "#/components/parameters/schemaid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        }
      ],
      "get": {
        "operationId": "getSchemaVersion",
        "description": "Gets the document stored for the schema version",
        "responses": {
          "200": {
            "description": "The schema version document",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-docs": {
                "$ref": "#/components/headers/resource-docs"
              },
              "resource-origin": {
                "$ref": "#/components/headers/resource-origin"
              },
              "resource-tags": {
                "$ref": "#/components/headers/resource-tags"
              },
              "resource-createdby": {
                "$ref": "#/components/headers/resource-createdby"
              },
              "resource-createdon": {
                "$ref": "#/components/headers/resource-createdon"
              },
              "resource-modifiedby": {
                "$ref": "#/components/headers/resource-modifiedby"
              },
              "resource-modifiedon": {
                "$ref": "#/components/headers/resource-modifiedon"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemaVersion",
        "responses": {
          "200": {
            "$ref": "#/components/responses/schemaVersionDeleteResponse"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{schemagroupid}/schemas/{schemaid}/versions/{versionid}/meta": {
      "parameters": [
        {
          "$ref": "#/components/parameters/schemagroupid"
        },
        {
          "$ref": "#/components/parameters/schemaid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        }
      ],
      "get": {
        "operationId": "getSchemaVersionMetadata",
        "description": "Gets metadata of the document stored for the schema version",
        "responses": {
          "200": {
            "description": "The metadata of the schema version document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemaVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "operationId": "updateSchemaVersionMetadata",
        "description": "Updates metadata of the document stored for the schema version",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schemaVersion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The metadata of the schema version document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemaVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "code",
        "in": "query"
      }
    },
    "parameters": {
      "id": {
        "in": "path",
        "name": "id",
        "description": "The id of the endpoint",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "groupid": {
        "in": "path",
        "name": "groupid",
        "description": "The id of the group",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "defid": {
        "in": "path",
        "name": "defid",
        "description": "The id of the definition",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "schemaid": {
        "in": "path",
        "name": "schemaid",
        "description": "The id of the schema",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "schemagroupid": {
        "in": "path",
        "name": "schemagroupid",
        "description": "The id of the schemagroup",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "versionid": {
        "in": "path",
        "name": "versionid",
        "description": "The id of the schema",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "resource-type": {
        "in": "header",
        "name": "resource-type",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource-id": {
        "in": "header",
        "name": "resource-id",
        "required": false,
        "description": "A unique identifier for this Endpoint. This value MUST be globally unique",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-version": {
        "in": "header",
        "name": "resource-version",
        "required": false,
        "description": "A number representing the version number of the resource.",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "resource-self": {
        "in": "header",
        "name": "resource-self",
        "required": false,
        "description": "A unique URI for the resource. The URI MUST be a combination of the  base URI of the list of this resource type for the current Discovery  Service appended with the `id` of this resource.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-description": {
        "in": "header",
        "name": "resource-description",
        "required": false,
        "description": "A summary of the purpose of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-name": {
        "in": "header",
        "name": "resource-name",
        "required": false,
        "description": "The name of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-docs": {
        "in": "header",
        "required": false,
        "name": "resource-docs",
        "description": "Absolute URL that provides a link to additional documentation about the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-origin": {
        "in": "header",
        "required": false,
        "name": "resource-origin",
        "description": "A URI reference to the original source of this resource.",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-tags": {
        "in": "header",
        "name": "resource-tags",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      },
      "resource-createdby": {
        "in": "header",
        "name": "resource-createdby",
        "required": false,
        "description": "Identity of who created this entity",
        "schema": {
          "type": "string"
        }
      },
      "resource-createdon": {
        "in": "header",
        "name": "resource-createdon",
        "required": false,
        "description": "Time when this entity was created",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "resource-modifiedby": {
        "in": "header",
        "name": "resource-modifiedby",
        "required": false,
        "description": "Identity of who last modified this entity",
        "schema": {
          "type": "string"
        }
      },
      "resource-modifiedon": {
        "in": "header",
        "name": "resource-modifiedon",
        "required": false,
        "description": "Time when this entity was last modified",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "headers": {
      "resource-type": {
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource-id": {
        "required": false,
        "description": "A unique identifier for this Endpoint. This value MUST be globally unique",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-version": {
        "required": false,
        "description": "A number representing the version number of the resource.",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "resource-self": {
        "required": false,
        "description": "A unique URI for the resource. The URI MUST be a combination of the  base URI of the list of this resource type for the current Discovery  Service appended with the `id` of this resource.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-description": {
        "required": false,
        "description": "A summary of the purpose of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-name": {
        "required": false,
        "description": "The name of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-docs": {
        "description": "Absolute URL that provides a link to additional documentation about the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-origin": {
        "description": "A URI reference to the original source of this resource.",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-tags": {
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      },
      "resource-createdby": {
        "required": false,
        "description": "Identity of who created this entity",
        "schema": {
          "type": "string"
        }
      },
      "resource-createdon": {
        "required": false,
        "description": "Time when this entity was created",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "resource-modifiedby": {
        "required": false,
        "description": "Identity of who last modified this entity",
        "schema": {
          "type": "string"
        }
      },
      "resource-modifiedon": {
        "required": false,
        "description": "Time when this entity was last modified",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "requestBodies": {
      "uploadDocPostRequest": {
        "description": "A request to create or update the discovery endpoint's collection of endpoints with the given endpoints",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/document"
            }
          }
        }
      },
      "endpointsPostRequest": {
        "description": "A request to create or update the discovery endpoint's collection of endpoints with the given endpoints",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/endpoints"
            }
          }
        }
      },
      "endpointsPutRequest": {
        "description": "A request to create or update the discovery endpoint's collection of endpoints with the given endpoint",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/endpoint"
            }
          }
        }
      },
      "groupsPostRequest": {
        "description": "A request to create or update the discovery group's collection of groups with the given groups",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitiongroups"
            }
          }
        }
      },
      "groupPutRequest": {
        "description": "A request to create or update the discovery group's collection of groups with the given group",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitiongroup"
            }
          }
        }
      },
      "definitionsPostRequest": {
        "description": "A request to create or update the discovery definition's collection of definitions with the given definitions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitions"
            }
          }
        }
      },
      "definitionPostRequest": {
        "description": "A request to create or update the discovery definition's collection of definitions with the given definition",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definition"
            }
          }
        }
      },
      "schemaGroupsPostRequest": {
        "description": "A request to create new schema groups",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroups"
            }
          }
        }
      },
      "schemaGroupPutRequest": {
        "description": "A request to create or update the discovery group's collection of schemagroups with the given group",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroup"
            }
          }
        }
      },
      "schemasPutRequest": {
        "description": "A request to create or update the discovery definition's collection of schemas with the given schemas",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas"
            }
          }
        }
      }
    },
    "responses": {
      "endpointsPostResponse": {
        "description": "A list of the resulting Endpoint values resulting from processing the request, in the same order as in the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/endpoints"
            }
          }
        }
      },
      "endpointsDeleteResponse": {
        "description": "A list of the Endpoints that were deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/endpoints"
            }
          }
        }
      },
      "endpointsPutResponse": {
        "description": "A Endpoint Reference referencing the updated Endpoint",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/endpoint"
            }
          }
        }
      },
      "endpointDeleteResponse": {
        "description": "The Endpoint that was deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/endpoint"
            }
          }
        }
      },
      "groupsPostResponse": {
        "description": "A list of the resulting Group values resulting from processing the request, in the same order as in the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitiongroups"
            }
          }
        }
      },
      "groupsDeleteResponse": {
        "description": "A list of the Groups that were deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitiongroups"
            }
          }
        }
      },
      "groupPutResponse": {
        "description": "A Group Reference referencing the updated Group",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitiongroup"
            }
          }
        }
      },
      "groupDeleteResponse": {
        "description": "The Group that was deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitiongroup"
            }
          }
        }
      },
      "definitionsPostResponse": {
        "description": "A list of the resulting Definition values resulting from processing the request, in the same order as in the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitions"
            }
          }
        }
      },
      "definitionsDeleteResponse": {
        "description": "A list of the Definitions that were deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definitions"
            }
          }
        }
      },
      "definitionPostResponse": {
        "description": "Returns the accepted definition",
        "headers": {
          "Location": {
            "description": "URI of the created definition",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definition"
            }
          }
        }
      },
      "definitionDeleteResponse": {
        "description": "The Definition that was deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/definition"
            }
          }
        }
      },
      "schemaGroupsGetResponse": {
        "description": "A list of the resulting Group values resulting from processing the request, in the same order as in the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroups"
            }
          }
        }
      },
      "schemaGroupsPostResponse": {
        "description": "A list of the resulting Group values resulting from processing the request, in the same order as in the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroups"
            }
          }
        }
      },
      "schemaGroupsDeleteResponse": {
        "description": "A list of the Groups that were deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroups"
            }
          }
        }
      },
      "schemaGroupPutResponse": {
        "description": "A Group Reference referencing the updated Group",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroup"
            }
          }
        }
      },
      "schemaGroupDeleteResponse": {
        "description": "The Group that was deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaGroup"
            }
          }
        }
      },
      "schemasPutResponse": {
        "description": "A list of the resulting Definition values resulting from processing the request, in the same order as in the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas"
            }
          }
        }
      },
      "schemasDeleteResponse": {
        "description": "A list of the Definitions that were deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemas"
            }
          }
        }
      },
      "schemaDeleteResponse": {
        "description": "The Definition that was deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schema"
            }
          }
        }
      },
      "registerSchemaDocumentResponse": {
        "description": "Newly created schema version metadata",
        "headers": {
          "Location": {
            "description": "The URI of the created schema version",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaVersion"
            }
          }
        }
      },
      "schemaVersionDeleteResponse": {
        "description": "The Definition that was deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schemaVersion"
            }
          }
        }
      }
    },
    "schemas": {
      "document": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "default": "https://cloudevents.io/schemas/registry"
          },
          "specversion": {
            "type": "string",
            "default": "0.4-wip"
          },
          "endpoints": {
            "$ref": "#/components/schemas/endpoints"
          },
          "endpointsUrl": {
            "type": "string",
            "format": "uri-reference"
          },
          "definitiongroups": {
            "$ref": "#/components/schemas/definitiongroups"
          },
          "definitiongroupsUrl": {
            "type": "string",
            "format": "uri-reference"
          },
          "schemagroups": {
            "$ref": "#/components/schemas/schemaGroups"
          },
          "schemagroupsUrl": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "anyOf": [
          {
            "required": [
              "endpoints"
            ]
          },
          {
            "required": [
              "endpointsUrl"
            ]
          },
          {
            "required": [
              "definitiongroups"
            ]
          },
          {
            "required": [
              "definitiongroupsUrl"
            ]
          },
          {
            "required": [
              "schemagroups"
            ]
          },
          {
            "required": [
              "schemagroupsUrl"
            ]
          }
        ]
      },
      "reference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier",
            "format": "uri-reference"
          },
          "epoch": {
            "type": "integer",
            "description": "A number representing the version number of the resource.",
            "format": "int64"
          }
        }
      },
      "definitiongroupReference": {
        "$ref": "#/components/schemas/reference"
      },
      "definitiongroupReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/definitiongroupReference"
        }
      },
      "definitiongroupUriReferences": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "definitiongroup": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint."
          },
          "definitions": {
            "$ref": "#/components/schemas/definitions"
          },
          "definitionsUrl": {
            "type": "string",
            "format": "uri-reference"
          },
          "definitiongroups": {
            "$ref": "#/components/schemas/definitiongroups"
          },
          "definitiongroupsUrl": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "definitionReference": {
        "$ref": "#/components/schemas/reference"
      },
      "definitionReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/definitionReference"
        }
      },
      "definition": {
        "type": "object",
        "discriminator": {
          "propertyName": "format",
          "mapping": {
            "AMQP/1.0": "#/components/schemas/amqpDefinition10",
            "AMQP": "#/components/schemas/amqpDefinition",
            "MQTT/3.1.1": "#/components/schemas/mqttDefinition311",
            "MQTT/5.0": "#/components/schemas/mqttDefinition50",
            "MQTT": "#/components/schemas/mqttDefinition",
            "HTTP/1.1": "#/components/schemas/httpDefinition11",
            "HTTP": "#/components/schemas/httpDefinition",
            "HTTP/2": "#/components/schemas/httpDefinition2",
            "HTTP/3": "#/components/schemas/httpDefinition3",
            "KAFKA/0.11": "#/components/schemas/kafkaDefinition011",
            "KAFKA": "#/components/schemas/kafkaDefinition",
            "CloudEvents/1.0": "#/components/schemas/cloudEventDefinition10",
            "CloudEvents": "#/components/schemas/cloudEventDefinition",
            "Generic": "#/components/schemas/genericDefinition"
          }
        },
        "description": "a message definition",
        "properties": {
          "schemaurl": {
            "type": "string",
            "description": "A URL to the schema of the message's data.",
            "format": "uri-reference"
          },
          "schema": {
            "oneOf": [
              {
                "type": "object",
                "description": "An in-line definition of the schema of the message's data."
              },
              {
                "type": "string",
                "description": "An in-line definition of the schema of the message's data."
              }
            ]
          },
          "schemaformat": {
            "type": "string",
            "description": "Declares the schema format"
          },
          "format": {
            "type": "string",
            "description": "Specifies the `format` of this definition."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ],
        "required": [
          "format"
        ]
      },
      "cloudEventDefinition10": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/cloudEventDefinition"
          }
        ]
      },
      "cloudEventDefinition": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/cloudEventMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "amqpDefinition10": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/amqpDefinition"
          }
        ]
      },
      "amqpDefinition": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/amqpMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "mqttDefinition50": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/mqttDefinition"
          }
        ]
      },
      "mqttDefinition311": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/mqttDefinition"
          }
        ]
      },
      "mqttDefinition": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/mqttMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "httpDefinition11": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/httpDefinition"
          }
        ]
      },
      "httpDefinition2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/httpDefinition"
          }
        ]
      },
      "httpDefinition3": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/httpDefinition"
          }
        ]
      },
      "httpDefinition": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/httpMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "kafkaDefinition011": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/kafkaDefinition"
          }
        ]
      },
      "kafkaDefinition": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/kafkaMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "genericDefinition": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "amqpMetadata": {
        "type": "object",
        "properties": {
          "application-properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          },
          "properties": {
            "type": "object",
            "properties": {
              "message-id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "user-id": {
                "$ref": "#/components/schemas/metadataPropertyBinary"
              },
              "to": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "subject": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "reply-to": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "correlation-id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "content-type": {
                "$ref": "#/components/schemas/metadataPropertySymbol"
              },
              "content-encoding": {
                "$ref": "#/components/schemas/metadataPropertySymbol"
              },
              "absolute-expiry-time": {
                "$ref": "#/components/schemas/metadataPropertyTimeStamp"
              },
              "creation-time": {
                "$ref": "#/components/schemas/metadataPropertyTimeStamp"
              },
              "group-id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "group-sequence": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              },
              "reply-to-group-id": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              }
            }
          },
          "delivery-annotations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          },
          "message-annotations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          },
          "header": {
            "type": "object",
            "properties": {
              "durable": {
                "$ref": "#/components/schemas/metadataPropertyBoolean"
              },
              "priority": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              },
              "ttl": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              },
              "first-acquirer": {
                "$ref": "#/components/schemas/metadataPropertyBoolean"
              },
              "delivery-count": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              }
            }
          },
          "footer": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "mqttMetadata": {
        "type": "object",
        "properties": {
          "qos": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "retain": {
            "$ref": "#/components/schemas/metadataPropertyBoolean"
          },
          "topic-name": {
            "$ref": "#/components/schemas/metadataPropertyUriTemplate"
          },
          "payload-format": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "message-expiry-interval": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "response-topic": {
            "$ref": "#/components/schemas/metadataPropertyUriTemplate"
          },
          "correlation-data": {
            "$ref": "#/components/schemas/metadataPropertyBinary"
          },
          "content-type": {
            "$ref": "#/components/schemas/metadataPropertySymbol"
          },
          "user-properties": {
            "type": "array",
            "description": "User Property is allowed to appear multiple times to represent multiple name, value pairs. The same name is allowed to appear more than once.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/metadataProperty"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "httpMetadata": {
        "type": "object",
        "properties": {
          "method": {
            "$ref": "#/components/schemas/metadataPropertyString"
          },
          "status": {
            "$ref": "#/components/schemas/metadataPropertyString"
          },
          "path": {
            "$ref": "#/components/schemas/metadataPropertyUriTemplate"
          },
          "headers": {
            "type": "array",
            "description": "HTTP Header is allowed to appear multiple times to represent multiple name, value pairs. The same name is allowed to appear more than once.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/metadataProperty"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "query": {
            "type": "object",
            "description": "HTTP Query Parameters are key value pairs",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "kafkaMetadata": {
        "type": "object",
        "properties": {
          "topic": {
            "$ref": "#/components/schemas/metadataPropertyString"
          },
          "partition": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "key": {
            "$ref": "#/components/schemas/metadataPropertyBinary"
          },
          "tiomestamp": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "headers": {
            "type": "object",
            "description": "Apache Kafka headers are key value pairs",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "cloudEventMetadata": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "type": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "time": {
                "$ref": "#/components/schemas/metadataPropertyTimeStamp"
              },
              "source": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "subject": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "dataschema": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "datacontenttype": {
                "$ref": "#/components/schemas/metadataPropertySymbol"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "metadataPropertyBase": {
        "type": "object",
        "description": "Base class for all metadata properties. The discriminator is used to determine the actual type of the property and is only relevant for the OpenAPI definition of the Registry API.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "var": "#/components/schemas/metadataProperty",
            "boolean": "#/components/schemas/metadataPropertyBoolean",
            "string": "#/components/schemas/metadataPropertyString",
            "symbol": "#/components/schemas/metadataPropertySymbol",
            "binary": "#/components/schemas/metadataPropertyBinary",
            "timestamp": "#/components/schemas/metadataPropertyTimeStamp",
            "duration": "#/components/schemas/metadataPropertyDuration",
            "uritemplate": "#/components/schemas/metadataPropertyUriTemplate",
            "uri": "#/components/schemas/metadataPropertyUri",
            "urireference": "#/components/schemas/metadataPropertyUriReference",
            "number": "#/components/schemas/metadataPropertyNumber",
            "integer": "#/components/schemas/metadataPropertyInteger"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "specurl": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "metadataProperty": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyBoolean": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertySymbol": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "pattern": "^[\\x32-\\x7F]*$"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyBinary": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "binary"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyTimeStamp": {
        "description": "This is a date-time property, holding RFC3339 string expressions.",
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyDuration": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "duration"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyUriTemplate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uri-template"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyInteger": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyNumber": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyUri": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uri"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyUriReference": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "definitions": {
        "type": "object",
        "description": "A collection of Message Definitions.",
        "additionalProperties": {
          "$ref": "#/components/schemas/definition"
        }
      },
      "definitiongroups": {
        "type": "object",
        "description": "A set of Definition Groups.",
        "additionalProperties": {
          "$ref": "#/components/schemas/definitiongroup"
        }
      },
      "resource": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "definitiongroup": "#/components/schemas/definitiongroup",
            "definition": "#/components/schemas/definition",
            "schemagroup": "#/components/schemas/schemaGroup",
            "endpoint": "#/components/schemas/endpoint",
            "schema": "#/components/schemas/schema",
            "schemaversion": "#/components/schemas/schemaVersion"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for this Endpoint. This value MUST be globally unique",
            "format": "uri-reference"
          },
          "groupId": {
            "type": "string",
            "description": "Optional reference to a definitiongroup that this resource is subordinate to",
            "format": "uri-reference"
          },
          "version": {
            "type": "integer",
            "description": "A number representing the version number of the resource.",
            "format": "int64"
          },
          "self": {
            "type": "string",
            "description": "A unique URI for the resource. The URI MUST be a combination of the base URI of the list of this resource type for the current Discovery Service appended with the `id` of this resource.",
            "format": "uri-reference"
          },
          "description": {
            "type": "string",
            "description": "A summary of the purpose of the resource."
          },
          "name": {
            "type": "string",
            "description": "The name of the resource."
          },
          "docs": {
            "type": "string",
            "description": "Absolute URL that provides a link to additional documentation about the resource.",
            "format": "uri"
          },
          "origin": {
            "type": "string",
            "description": "A URI reference to the original source of this resource.",
            "format": "uri-reference"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "createdBy": {
            "description": "Identity of who created this entity",
            "type": "string"
          },
          "createdOn": {
            "description": "Time when this entity was created",
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "description": "Identity of who last modified this entity",
            "type": "string"
          },
          "modifiedOn": {
            "description": "Time when this entity was last modified",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "endpointReference": {
        "$ref": "#/components/schemas/reference"
      },
      "endpointReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/endpointReference"
        }
      },
      "endpoints": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/endpoint"
        }
      },
      "endpoint": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "A string that can be used to correlate Endpoints"
          },
          "usage": {
            "description": "The interaction model supported by this Endpoint",
            "type": "string",
            "enum": [
              "consumer",
              "producer",
              "subscriber"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/endpointConfig"
          },
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint."
          },
          "deprecated": {
            "type": "object",
            "properties": {
              "effective": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which the endpoint will enter a deprecated state"
              },
              "removal": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which the endpoint will be removed"
              },
              "alternative": {
                "type": "string",
                "format": "uri",
                "description": "A URL to an possible alternative endpoint"
              },
              "docs": {
                "type": "string",
                "format": "uri",
                "description": "A URL to additional information concerning the deprecation of this endpoint. Possible information might include rationale behind the action, or discussion of alternatives"
              }
            }
          },
          "authscope": {
            "type": "string",
            "description": "Authorization scope needed for creating subscriptions. The actual meaning of this field is determined on a per-endpoint basis",
            "example": "storage.read"
          },
          "definitions": {
            "$ref": "#/components/schemas/definitions"
          },
          "definitiongroups": {
            "$ref": "#/components/schemas/definitiongroupUriReferences"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "endpointConfig": {
        "type": "object",
        "discriminator": {
          "propertyName": "usage",
          "mapping": {
            "subscriber": "#/components/schemas/endpointConfigSubscriber",
            "consumer": "#/components/schemas/endpointConfigConsumer",
            "producer": "#/components/schemas/endpointConfigPublisher"
          }
        },
        "properties": {
          "usage": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          },
          "endpoints": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              {
                "type": "string",
                "format": "uri"
              }
            ]
          },
          "options": {
            "$ref": "#/components/schemas/endpointOptions"
          }
        }
      },
      "endpointConfigSubscriber": {
        "type": "object",
        "properties": {
          "subscriptionconfig": {
            "type": "object",
            "description": "A map indicating supported options for the config parameter for the CloudSubscriptions subscribe() API call. Keys are the name of keys in the allowed config map, the values indicate the type of that parameter, confirming to the CloudEvents type system. TODO: Needs resolution with CloudSubscriptions API",
            "additionalProperties": {
              "type": "string"
            }
          },
          "filterdialects": {
            "type": "array",
            "description": "Filter dialects that can be used in subscriptions for this endpoint",
            "items": {
              "type": "string",
              "description": "filter dialect"
            },
            "example": "[ \"basic\" ]"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointConfig"
          }
        ]
      },
      "endpointConfigConsumer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointConfig"
          }
        ]
      },
      "endpointConfigPublisher": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointConfig"
          }
        ]
      },
      "endpointOptions": {
        "type": "object",
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "MQTT/3.1.1": "#/components/schemas/endpointOptionsMqtt311",
            "MQTT/5.0": "#/components/schemas/endpointOptionsMqtt50",
            "MQTT": "#/components/schemas/endpointOptionsMqtt",
            "AMQP/1.0": "#/components/schemas/endpointOptionsAmqp10",
            "AMQP": "#/components/schemas/endpointOptionsAmqp",
            "HTTP/1.1": "#/components/schemas/endpointOptionsHttp11",
            "HTTP/2": "#/components/schemas/endpointOptionsHttp2",
            "HTTP/3": "#/components/schemas/endpointOptionsHttp3",
            "HTTP": "#/components/schemas/endpointOptionsHttp",
            "KAFKA": "#/components/schemas/endpointOptionsKafka",
            "NATS": "#/components/schemas/endpointOptionsNats"
          }
        },
        "properties": {
          "protocol": {
            "type": "string"
          }
        }
      },
      "endpointOptionsMqtt311": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsMqtt"
          }
        ]
      },
      "endpointOptionsMqtt50": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsMqtt"
          }
        ]
      },
      "endpointOptionsMqtt": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The topic to use for this endpoint"
              },
              "qos": {
                "type": "integer",
                "description": "The quality of service level to use for this endpoint"
              },
              "retain": {
                "type": "boolean",
                "description": "Whether to retain messages for this endpoint"
              },
              "clean-session": {
                "type": "boolean",
                "description": "Whether to use a clean session for this endpoint"
              },
              "will-topic": {
                "type": "string",
                "format": "uritemplate",
                "description": "The topic to use for the will message for this endpoint"
              },
              "will-message": {
                "type": "string",
                "format": "urireference",
                "description": "The will message to use (message definition reference)"
              }
            }
          }
        ]
      },
      "endpointOptionsAmqp10": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsAmqp"
          }
        ]
      },
      "endpointOptionsAmqp": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "node": {
                "type": "string",
                "description": "The quality of service level to use for this endpoint"
              },
              "durable": {
                "type": "boolean",
                "description": "Whether to retain messages for this endpoint"
              },
              "ttl": {
                "type": "integer",
                "description": "The time in milliseconds after which messages are discarded for this endpoint"
              },
              "distribution-mode": {
                "type": "string",
                "description": "The distribution mode to use for this endpoint",
                "enum": [
                  "move",
                  "copy"
                ]
              },
              "link-properties": {
                "type": "object",
                "description": "The link properties to set",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "connection-properties": {
                "type": "object",
                "description": "The connection prooperties to set",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "endpointOptionsHttp11": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsHttp"
          }
        ]
      },
      "endpointOptionsHttp2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsHttp"
          }
        ]
      },
      "endpointOptionsHttp3": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsHttp"
          }
        ]
      },
      "endpointOptionsHttp": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "The HTTP method to use for this endpoint"
              },
              "headers": {
                "type": "array",
                "description": "The HTTP headers to use for this endpoint",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The HTTP header name"
                    },
                    "value": {
                      "type": "string",
                      "description": "The HTTP header value"
                    }
                  }
                }
              },
              "query": {
                "type": "object",
                "description": "The HTTP query parameters to use for this endpoint",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "endpointOptionsKafka": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The NATS topic to use for this endpoint"
              },
              "acks": {
                "type": "integer",
                "description": "The Kafka acks to use for this endpoint"
              },
              "key": {
                "type": "string",
                "description": "The Kafka key to use for this endpoint"
              },
              "partition": {
                "type": "integer",
                "description": "The Kafka partition to use for this endpoint"
              },
              "consumer-group": {
                "type": "string",
                "description": "The Kafka consumer group to use for this endpoint"
              }
            }
          }
        ]
      },
      "endpointOptionsNats": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The NATS topic to use for this endpoint"
              }
            }
          }
        ]
      },
      "schemaGroupReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier",
            "format": "uri-reference"
          },
          "epoch": {
            "type": "integer",
            "description": "A number representing the version number of the resource.",
            "format": "int64"
          }
        }
      },
      "schemaGroupReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemaGroupReference"
        }
      },
      "schemaGroupUriReferences": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "schemaGroups": {
        "type": "object",
        "description": "A collection of schemagroups",
        "additionalProperties": {
          "$ref": "#/components/schemas/schemaGroup"
        }
      },
      "schemaGroup": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the format of all schemas in this definitiongroup in the format {schema-type}/{version}",
            "example": [
              "jsonschema/draft-07",
              "avro",
              "xsd",
              "protobuf"
            ]
          },
          "schemas": {
            "$ref": "#/components/schemas/schemas"
          },
          "schemagroups": {
            "$ref": "#/components/schemas/schemaGroups"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "schemaReference": {
        "$ref": "#/components/schemas/reference"
      },
      "schemaReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemaReference"
        }
      },
      "schemas": {
        "type": "object",
        "description": "A collection of schemas",
        "additionalProperties": {
          "$ref": "#/components/schemas/schema"
        }
      },
      "schema": {
        "type": "object",
        "description": "a schema is a collection of schema version documents that describe semantically the same data item",
        "properties": {
          "versions": {
            "type": "object",
            "description": "A collection of schema versions",
            "additionalProperties": {
              "$ref": "#/components/schemas/schemaVersion"
            }
          },
          "format": {
            "type": "string",
            "description": "The format of the schema in the format {schema-type}/{version}"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "schemaVersion": {
        "type": "object",
        "description": "a schema version (a document)",
        "properties": {
          "schemaurl": {
            "type": "string",
            "description": "A URL to the schema document.",
            "format": "uri"
          },
          "schema": {
            "oneOf": [
              {
                "type": "object",
                "description": "An in-line definition of the schema of the message's data."
              },
              {
                "type": "string",
                "description": "An in-line definition of the schema of the message's data."
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      }
    }
  }
}