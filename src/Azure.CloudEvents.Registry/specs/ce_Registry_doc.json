{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://cloudevents.io/schemas/registry",
  "title": "JSON Schema for CloudEvents Registry Documents",
  "allOf": [
    {
      "$ref": "#/components/schemas/document"
    }
  ],
  "components": {
    "schemas": {
      "document": {
        "type": "object",
        "properties": {
          "$schema": {
            "type": "string",
            "default": "https://cloudevents.io/schemas/registry"
          },
          "specversion": {
            "type": "string",
            "default": "0.4-wip"
          },
          "endpoints": {
            "$ref": "#/components/schemas/endpoints"
          },
          "endpointsUrl": {
            "type": "string",
            "format": "uri-reference"
          },
          "definitiongroups": {
            "$ref": "#/components/schemas/definitiongroups"
          },
          "definitiongroupsUrl": {
            "type": "string",
            "format": "uri-reference"
          },
          "schemagroups": {
            "$ref": "#/components/schemas/schemaGroups"
          },
          "schemagroupsUrl": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "anyOf": [
          {
            "required": [
              "endpoints"
            ]
          },
          {
            "required": [
              "endpointsUrl"
            ]
          },
          {
            "required": [
              "definitiongroups"
            ]
          },
          {
            "required": [
              "definitiongroupsUrl"
            ]
          },
          {
            "required": [
              "schemagroups"
            ]
          },
          {
            "required": [
              "schemagroupsUrl"
            ]
          }
        ]
      },
      "reference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier",
            "format": "uri-reference"
          },
          "epoch": {
            "type": "integer",
            "description": "A number representing the version number of the resource.",
            "format": "int64"
          }
        }
      },
      "definitiongroupReference": {
        "$ref": "#/components/schemas/reference"
      },
      "definitiongroupReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/definitiongroupReference"
        }
      },
      "definitiongroupUriReferences": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "definitiongroup": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint."
          },
          "definitions": {
            "$ref": "#/components/schemas/definitions"
          },
          "definitionsUrl": {
            "type": "string",
            "format": "uri-reference"
          },
          "definitiongroups": {
            "$ref": "#/components/schemas/definitiongroups"
          },
          "definitiongroupsUrl": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "definitionReference": {
        "$ref": "#/components/schemas/reference"
      },
      "definitionReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/definitionReference"
        }
      },
      "definition": {
        "type": "object",
        "discriminator": {
          "propertyName": "format",
          "mapping": {
            "AMQP/1.0": "#/components/schemas/amqpDefinition10",
            "AMQP": "#/components/schemas/amqpDefinition",
            "MQTT/3.1.1": "#/components/schemas/mqttDefinition311",
            "MQTT/5.0": "#/components/schemas/mqttDefinition50",
            "MQTT": "#/components/schemas/mqttDefinition",
            "HTTP/1.1": "#/components/schemas/httpDefinition11",
            "HTTP": "#/components/schemas/httpDefinition",
            "HTTP/2": "#/components/schemas/httpDefinition2",
            "HTTP/3": "#/components/schemas/httpDefinition3",
            "KAFKA/0.11": "#/components/schemas/kafkaDefinition011",
            "KAFKA": "#/components/schemas/kafkaDefinition",
            "CloudEvents/1.0": "#/components/schemas/cloudEventDefinition10",
            "CloudEvents": "#/components/schemas/cloudEventDefinition",
            "Generic": "#/components/schemas/genericDefinition"
          }
        },
        "description": "a message definition",
        "properties": {
          "schemaurl": {
            "type": "string",
            "description": "A URL to the schema of the message's data.",
            "format": "uri-reference"
          },
          "schema": {
            "type": "object",
            "description": "An in-line definition of the schema of the message's data."
          },
          "format": {
            "type": "string",
            "description": "Specifies the `format` of this definition."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ],
        "required": [
          "format"
        ]
      },
      "cloudEventDefinition10": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/cloudEventDefinition"
          }
        ]
      },
      "cloudEventDefinition": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint.",
            "enum": [
              "CloudEvents/1.0"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/cloudEventMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "amqpDefinition10": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/amqpDefinition"
          }
        ]
      },
      "amqpDefinition": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint.",
            "enum": [
              "AMQP/1.0"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/amqpMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "mqttDefinition50": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/mqttDefinition"
          }
        ]
      },
      "mqttDefinition311": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/mqttDefinition"
          }
        ]
      },
      "mqttDefinition": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint.",
            "enum": [
              "MQTT/5.0",
              "MQTT/3.1.1"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/mqttMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "httpDefinition11": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/httpDefinition"
          }
        ]
      },
      "httpDefinition2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/httpDefinition"
          }
        ]
      },
      "httpDefinition3": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/httpDefinition"
          }
        ]
      },
      "httpDefinition": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint.",
            "enum": [
              "HTTP/1.1",
              "HTTP/2",
              "HTTP/3"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/httpMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "kafkaDefinition011": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/kafkaDefinition"
          }
        ]
      },
      "kafkaDefinition": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint.",
            "enum": [
              "KAFKA/0.11",
              "KAFKA"
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/kafkaMetadata"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "genericDefinition": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint."
          },
          "metadata": {
            "type": "object"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/definition"
          }
        ]
      },
      "amqpMetadata": {
        "type": "object",
        "properties": {
          "application-properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          },
          "properties": {
            "type": "object",
            "properties": {
              "message-id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "user-id": {
                "$ref": "#/components/schemas/metadataPropertyBinary"
              },
              "to": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "subject": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "reply-to": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "correlation-id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "content-type": {
                "$ref": "#/components/schemas/metadataPropertySymbol"
              },
              "content-encoding": {
                "$ref": "#/components/schemas/metadataPropertySymbol"
              },
              "absolute-expiry-time": {
                "$ref": "#/components/schemas/metadataPropertyTimeStamp"
              },
              "creation-time": {
                "$ref": "#/components/schemas/metadataPropertyTimeStamp"
              },
              "group-id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "group-sequence": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              },
              "reply-to-group-id": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              }
            }
          },
          "delivery-annotations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          },
          "message-annotations": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          },
          "header": {
            "type": "object",
            "properties": {
              "durable": {
                "$ref": "#/components/schemas/metadataPropertyBoolean"
              },
              "priority": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              },
              "ttl": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              },
              "first-acquirer": {
                "$ref": "#/components/schemas/metadataPropertyBoolean"
              },
              "delivery-count": {
                "$ref": "#/components/schemas/metadataPropertyInteger"
              }
            }
          },
          "footer": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "mqttMetadata": {
        "type": "object",
        "properties": {
          "qos": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "retain": {
            "$ref": "#/components/schemas/metadataPropertyBoolean"
          },
          "topic-name": {
            "$ref": "#/components/schemas/metadataPropertyUriTemplate"
          },
          "payload-format": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "message-expiry-interval": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "response-topic": {
            "$ref": "#/components/schemas/metadataPropertyUriTemplate"
          },
          "correlation-data": {
            "$ref": "#/components/schemas/metadataPropertyBinary"
          },
          "content-type": {
            "$ref": "#/components/schemas/metadataPropertySymbol"
          },
          "user-properties": {
            "type": "array",
            "description": "User Property is allowed to appear multiple times to represent multiple name, value pairs. The same name is allowed to appear more than once.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/metadataProperty"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "httpMetadata": {
        "type": "object",
        "properties": {
          "method": {
            "$ref": "#/components/schemas/metadataPropertyString"
          },
          "status": {
            "$ref": "#/components/schemas/metadataPropertyString"
          },
          "path": {
            "$ref": "#/components/schemas/metadataPropertyUriTemplate"
          },
          "headers": {
            "type": "array",
            "description": "HTTP Header is allowed to appear multiple times to represent multiple name, value pairs. The same name is allowed to appear more than once.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/metadataProperty"
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "query": {
            "type": "object",
            "description": "HTTP Query Parameters are key value pairs",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "kafkaMetadata": {
        "type": "object",
        "properties": {
          "topic": {
            "$ref": "#/components/schemas/metadataPropertyString"
          },
          "partition": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "key": {
            "$ref": "#/components/schemas/metadataPropertyBinary"
          },
          "tiomestamp": {
            "$ref": "#/components/schemas/metadataPropertyInteger"
          },
          "headers": {
            "type": "object",
            "description": "Apache Kafka headers are key value pairs",
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "cloudEventMetadata": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "type": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "time": {
                "$ref": "#/components/schemas/metadataPropertyTimeStamp"
              },
              "source": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "subject": {
                "$ref": "#/components/schemas/metadataPropertyString"
              },
              "dataschema": {
                "$ref": "#/components/schemas/metadataPropertyUriTemplate"
              },
              "datacontenttype": {
                "$ref": "#/components/schemas/metadataPropertySymbol"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/metadataProperty"
            }
          }
        }
      },
      "metadataPropertyBase": {
        "type": "object",
        "description": "Base class for all metadata properties. The discriminator is used to determine the actual type of the property and is only relevant for the OpenAPI definition of the Registry API.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "var": "#/components/schemas/metadataProperty",
            "boolean": "#/components/schemas/metadataPropertyBoolean",
            "string": "#/components/schemas/metadataPropertyString",
            "symbol": "#/components/schemas/metadataPropertySymbol",
            "binary": "#/components/schemas/metadataPropertyBinary",
            "timestamp": "#/components/schemas/metadataPropertyTimeStamp",
            "duration": "#/components/schemas/metadataPropertyDuration",
            "uritemplate": "#/components/schemas/metadataPropertyUriTemplate",
            "uri": "#/components/schemas/metadataPropertyUri",
            "urireference": "#/components/schemas/metadataPropertyUriReference",
            "number": "#/components/schemas/metadataPropertyNumber",
            "integer": "#/components/schemas/metadataPropertyInteger"
          }
        },
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "specurl": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "metadataProperty": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyBoolean": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertySymbol": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "pattern": "^[\\x32-\\x7F]*$"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyBinary": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "binary"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyTimeStamp": {
        "description": "This is a date-time property, holding RFC3339 string expressions.",
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyDuration": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "duration"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyUriTemplate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uri-template"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyInteger": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyNumber": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyUri": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uri"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "metadataPropertyUriReference": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/metadataPropertyBase"
          }
        ]
      },
      "definitions": {
        "type": "object",
        "description": "A collection of Message Definitions.",
        "additionalProperties": {
          "$ref": "#/components/schemas/definition"
        }
      },
      "definitiongroups": {
        "type": "object",
        "description": "A set of Definition Groups.",
        "additionalProperties": {
          "$ref": "#/components/schemas/definitiongroup"
        }
      },
      "resource": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "definitiongroup": "#/components/schemas/definitiongroup",
            "definition": "#/components/schemas/definition",
            "schemagroup": "#/components/schemas/schemaGroup",
            "endpoint": "#/components/schemas/endpoint",
            "schema": "#/components/schemas/schema",
            "schemaversion": "#/components/schemas/schemaVersion"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for this Endpoint. This value MUST be globally unique",
            "format": "uri-reference"
          },
          "groupId": {
            "type": "string",
            "description": "Optional reference to a definitiongroup that this resource is subordinate to",
            "format": "uri-reference"
          },
          "version": {
            "type": "integer",
            "description": "A number representing the version number of the resource.",
            "format": "int64"
          },
          "self": {
            "type": "string",
            "description": "A unique URI for the resource. The URI MUST be a combination of the base URI of the list of this resource type for the current Discovery Service appended with the `id` of this resource.",
            "format": "uri-reference"
          },
          "description": {
            "type": "string",
            "description": "A summary of the purpose of the resource."
          },
          "name": {
            "type": "string",
            "description": "The name of the resource."
          },
          "docs": {
            "type": "string",
            "description": "Absolute URL that provides a link to additional documentation about the resource.",
            "format": "uri"
          },
          "origin": {
            "type": "string",
            "description": "A URI reference to the original source of this resource.",
            "format": "uri-reference"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "createdBy": {
            "description": "Identity of who created this entity",
            "type": "string"
          },
          "createdOn": {
            "description": "Time when this entity was created",
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "description": "Identity of who last modified this entity",
            "type": "string"
          },
          "modifiedOn": {
            "description": "Time when this entity was last modified",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "endpointReference": {
        "$ref": "#/components/schemas/reference"
      },
      "endpointReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/endpointReference"
        }
      },
      "endpoints": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/endpoint"
        }
      },
      "endpoint": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string",
            "description": "A string that can be used to correlate Endpoints"
          },
          "usage": {
            "description": "The interaction model supported by this Endpoint",
            "type": "string",
            "enum": [
              "consumer",
              "producer",
              "subscriber"
            ]
          },
          "config": {
            "$ref": "#/components/schemas/endpointConfig"
          },
          "format": {
            "type": "string",
            "description": "Specifies the `format` value of the Definitions associated with this Endpoint."
          },
          "deprecated": {
            "type": "object",
            "properties": {
              "effective": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which the endpoint will enter a deprecated state"
              },
              "removal": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which the endpoint will be removed"
              },
              "alternative": {
                "type": "string",
                "format": "uri",
                "description": "A URL to an possible alternative endpoint"
              },
              "docs": {
                "type": "string",
                "format": "uri",
                "description": "A URL to additional information concerning the deprecation of this endpoint. Possible information might include rationale behind the action, or discussion of alternatives"
              }
            }
          },
          "authscope": {
            "type": "string",
            "description": "Authorization scope needed for creating subscriptions. The actual meaning of this field is determined on a per-endpoint basis",
            "example": "storage.read"
          },
          "definitions": {
            "$ref": "#/components/schemas/definitions"
          },
          "definitiongroups": {
            "$ref": "#/components/schemas/definitiongroupUriReferences"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "endpointConfig": {
        "type": "object",
        "discriminator": {
          "propertyName": "usage",
          "mapping": {
            "subscriber": "#/components/schemas/endpointConfigSubscriber",
            "consumer": "#/components/schemas/endpointConfigConsumer",
            "producer": "#/components/schemas/endpointConfigPublisher"
          }
        },
        "properties": {
          "usage": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          },
          "endpoints": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              {
                "type": "string",
                "format": "uri"
              }
            ]
          },
          "options": {
            "$ref": "#/components/schemas/endpointOptions"
          }
        }
      },
      "endpointConfigSubscriber": {
        "type": "object",
        "properties": {
          "subscriptionconfig": {
            "type": "object",
            "description": "A map indicating supported options for the config parameter for the CloudSubscriptions subscribe() API call. Keys are the name of keys in the allowed config map, the values indicate the type of that parameter, confirming to the CloudEvents type system. TODO: Needs resolution with CloudSubscriptions API",
            "additionalProperties": {
              "type": "string"
            }
          },
          "filterdialects": {
            "type": "array",
            "description": "Filter dialects that can be used in subscriptions for this endpoint",
            "items": {
              "type": "string",
              "description": "filter dialect"
            },
            "example": "[ \"basic\" ]"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointConfig"
          }
        ]
      },
      "endpointConfigConsumer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointConfig"
          }
        ]
      },
      "endpointConfigPublisher": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointConfig"
          }
        ]
      },
      "endpointOptions": {
        "type": "object",
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "MQTT/3.1.1": "#/components/schemas/endpointOptionsMqtt311",
            "MQTT/5.0": "#/components/schemas/endpointOptionsMqtt50",
            "MQTT": "#/components/schemas/endpointOptionsMqtt",
            "AMQP/1.0": "#/components/schemas/endpointOptionsAmqp10",
            "AMQP": "#/components/schemas/endpointOptionsAmqp",
            "HTTP/1.1": "#/components/schemas/endpointOptionsHttp11",
            "HTTP/2": "#/components/schemas/endpointOptionsHttp2",
            "HTTP/3": "#/components/schemas/endpointOptionsHttp3",
            "HTTP": "#/components/schemas/endpointOptionsHttp",
            "KAFKA": "#/components/schemas/endpointOptionsKafka",
            "NATS": "#/components/schemas/endpointOptionsNats"
          }
        },
        "properties": {
          "protocol": {
            "type": "string"
          }
        }
      },
      "endpointOptionsMqtt311": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsMqtt"
          }
        ]
      },
      "endpointOptionsMqtt50": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsMqtt"
          }
        ]
      },
      "endpointOptionsMqtt": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The topic to use for this endpoint"
              },
              "qos": {
                "type": "integer",
                "description": "The quality of service level to use for this endpoint"
              },
              "retain": {
                "type": "boolean",
                "description": "Whether to retain messages for this endpoint"
              },
              "clean-session": {
                "type": "boolean",
                "description": "Whether to use a clean session for this endpoint"
              },
              "will-topic": {
                "type": "string",
                "format": "uritemplate",
                "description": "The topic to use for the will message for this endpoint"
              },
              "will-message": {
                "type": "string",
                "format": "urireference",
                "description": "The will message to use (message definition reference)"
              }
            }
          }
        ]
      },
      "endpointOptionsAmqp10": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsAmqp"
          }
        ]
      },
      "endpointOptionsAmqp": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "node": {
                "type": "string",
                "description": "The quality of service level to use for this endpoint"
              },
              "durable": {
                "type": "boolean",
                "description": "Whether to retain messages for this endpoint"
              },
              "ttl": {
                "type": "integer",
                "description": "The time in milliseconds after which messages are discarded for this endpoint"
              },
              "distribution-mode": {
                "type": "string",
                "description": "The distribution mode to use for this endpoint",
                "enum": [
                  "move",
                  "copy"
                ]
              },
              "link-properties": {
                "type": "object",
                "description": "The link properties to set",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "connection-properties": {
                "type": "object",
                "description": "The connection prooperties to set",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "endpointOptionsHttp11": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsHttp"
          }
        ]
      },
      "endpointOptionsHttp2": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsHttp"
          }
        ]
      },
      "endpointOptionsHttp3": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptionsHttp"
          }
        ]
      },
      "endpointOptionsHttp": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "method": {
                "type": "string",
                "description": "The HTTP method to use for this endpoint"
              },
              "headers": {
                "type": "array",
                "description": "The HTTP headers to use for this endpoint",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The HTTP header name"
                    },
                    "value": {
                      "type": "string",
                      "description": "The HTTP header value"
                    }
                  }
                }
              },
              "query": {
                "type": "object",
                "description": "The HTTP query parameters to use for this endpoint",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "endpointOptionsKafka": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The NATS topic to use for this endpoint"
              },
              "acks": {
                "type": "integer",
                "description": "The Kafka acks to use for this endpoint"
              },
              "key": {
                "type": "string",
                "description": "The Kafka key to use for this endpoint"
              },
              "partition": {
                "type": "integer",
                "description": "The Kafka partition to use for this endpoint"
              },
              "consumer-group": {
                "type": "string",
                "description": "The Kafka consumer group to use for this endpoint"
              }
            }
          }
        ]
      },
      "endpointOptionsNats": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/endpointOptions"
          },
          {
            "type": "object",
            "properties": {
              "topic": {
                "type": "string",
                "description": "The NATS topic to use for this endpoint"
              }
            }
          }
        ]
      },
      "schemaGroupReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier",
            "format": "uri-reference"
          },
          "epoch": {
            "type": "integer",
            "description": "A number representing the version number of the resource.",
            "format": "int64"
          }
        }
      },
      "schemaGroupReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemaGroupReference"
        }
      },
      "schemaGroupUriReferences": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "schemaGroups": {
        "type": "object",
        "description": "A collection of schemagroups",
        "additionalProperties": {
          "$ref": "#/components/schemas/schemaGroup"
        }
      },
      "schemaGroup": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Specifies the format of all schemas in this definitiongroup",
            "example": [
              "json",
              "avro",
              "xsd",
              "protobuf"
            ]
          },
          "schemas": {
            "$ref": "#/components/schemas/schemas"
          },
          "schemagroups": {
            "$ref": "#/components/schemas/schemaGroups"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "schemaReference": {
        "$ref": "#/components/schemas/reference"
      },
      "schemaReferences": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemaReference"
        }
      },
      "schemas": {
        "type": "object",
        "description": "A collection of schemas",
        "additionalProperties": {
          "$ref": "#/components/schemas/schema"
        }
      },
      "schema": {
        "type": "object",
        "description": "a schema is a collection of schema version documents that describe semantically the same data item",
        "properties": {
          "versions": {
            "type": "object",
            "description": "A collection of schema versions",
            "additionalProperties": {
              "$ref": "#/components/schemas/schemaVersion"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      },
      "schemaVersion": {
        "type": "object",
        "description": "a schema version (a document)",
        "properties": {
          "schemaurl": {
            "type": "string",
            "description": "A URL to the schema document.",
            "format": "uri"
          },
          "schemaobject": {
            "type": "object",
            "description": "An in-line definition of the schema document (JSON)."
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/resource"
          }
        ]
      }
    }
  }
}